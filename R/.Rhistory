get_muniplicites = function() {
return(muni_list)
},
set_muniplicity = function(val) {
muniplicity <<- val
},
get_muniplicity = function() {
return(muniplicity)
},
get_p_vals = function() {
temp <- unlist(lapply(seq(9,31,by=2), function(x) {
mean(as.numeric(sheet[[paste("X__", as.character(x), sep="")]][c(-1,-2)]))
}))
names(temp) <- unlist(lapply(seq(9,31,by=2), function(x) {
asd <- strsplit(sheet[[paste("X__", as.character(x), sep="")]][2], " ")
asd[[1]][1]
}))
curr_muni_p <<- temp
return(curr_muni_p)
}
)
)
X <- elect_viz$new(data = sheet)
X$get_p_vals()
temp <- unlist(lapply(seq(9,31,by=2), function(x) {
mean(as.numeric(
data[[paste("X__", as.character(x), sep="")]][c(-1,-2) & data$X__4 == "Stockholms län"]
))
}))
mean(as.numeric(
data[[paste("X__", as.character(x), sep="")]][c(-1,-2) && data$X__4 == "Stockholms län"]
))
temp <- unlist(lapply(seq(9,31,by=2), function(x) {
mean(as.numeric(
data[[paste("X__", as.character(x), sep="")]][c(-1,-2) && data$X__4 == "Stockholms län"]
))
}))
temp <- unlist(lapply(seq(9,31,by=2), function(x) {
mean(as.numeric(
sheet[[paste("X__", as.character(x), sep="")]][c(-1,-2) && sheet$X__4 == "Stockholms län"]
))
}))
names(temp) <- unlist(lapply(seq(9,31,by=2), function(x) {
namestr <- strsplit(sheet[[paste("X__", as.character(x), sep="")]][2], " ")
namestr[[1]][1]
}))
temp
temp <- unlist(lapply(seq(9,31,by=2), function(x) {
as.numeric(
sheet[[paste("X__", as.character(x), sep="")]][c(-1,-2) & sheet$X__4 == "Stockholms län"]
)
}))
temp
temp <- unlist(lapply(seq(9,31,by=2), function(x) {
as.numeric(
sheet[[paste("X__", as.character(x), sep="")]][c(-1,-2)]
)
}))
temp
tempdata <- data[data$X__4 == "Stockholms län",]
tempdata <- sheet[sheet$X__4 == "Stockholms län",]
tempdata
tempdata <- sheet[sheet$X__4 == "Stockholms län"]
asd <- sheet$X__9[sheet$X__4 == "Stockholms kommun"]
asd
temp <- unlist(lapply(seq(9,31,by=2), function(x) {
as.numeric(
sheet[[paste("X__", as.character(x), sep="")]][sheet$X__4 == "Stockholms län"]
)
}))
temp
length(sheet[sheet$X__4 == "Stockholms län"])
length(sheet[[sheet$X__4 == "Stockholms län"]])
sheet$X__4 == "Stockholms län"
asd <- sheet$X__4 == "Stockholms län"
asd
typeof(asd)
tempdata <- sheet[sheet$X__4 == "Stockholms län"][-1]
tempdata <- sheet[[sheet$X__4 == "Stockholms län"]][-1]
hej <- sheet[,-1]
hej <- sheet[-1,]
temp <- unlist(lapply(seq(9,31,by=2), function(x) {
as.numeric(
hej[[paste("X__", as.character(x), sep="")]][hej$X__4 == "Stockholms län"]
)
}))
temp
temp <- unlist(lapply(seq(9,31,by=2), function(x) {
as.numeric(
hej[[paste("X__", as.character(x), sep="")]][hej$X__4 == "Stockholms län"]
)
}))
temp
temp[hej$X__4 = "Stockholms län"]
temp[hej$X__4 == "Stockholms län"]
temp <- lapply(seq(9,31,by=2), function(x) {
val <-
as.numeric(
hej[[paste("X__", as.character(x), sep="")]]
)
})
temp
temp <- lapply(seq(9,31,by=2), function(x) {
val <-
as.numeric(
hej[[paste("X__", as.character(x), sep="")]]
)
val[hej$X__4 == "Stockholms län"]
})
temp
length(hej$X__4 == "Stockholms län")
length(hej[hej$X__4 == "Stockholms län"])
length(hej[[hej$X__4 == "Stockholms län"]])
length(hej$X__9[hej$X__4 == "Stockholms län"])
length(hej$X__9[hej$X__4 == "Blekinge län"])
tempdata <- sheet[sheet$X__4 == "Bleking län"]
temp <- lapply(seq(9,31,by=2), function(x) {
val <-
as.numeric(
hej[[paste("X__", as.character(x), sep="")]]
)
val[hej$X__4 == "Blekinge län"]
})
temp
temp <- lapply(seq(9,31,by=2), function(x) {
val <-
as.numeric(
hej[[paste("X__", as.character(x), sep="")]]
)
mean(val[hej$X__4 == "Blekinge län"])
})
temp
names(temp) <- unlist(lapply(seq(9,31,by=2), function(x) {
namestr <- strsplit(sheet[[paste("X__", as.character(x), sep="")]][2], " ")
namestr[[1]][1]
}))
temp
elect_viz <- setRefClass(
"elect_viz",
fields = list(
muniplicity = "character",
muni_list = "character",
data = "data.frame",
mean_p_vals = "vector"
),
methods = list(
initialize = function(data) {
# Gets the list of possible muniplicities, removes unused indices
data <<- data[-1,] # To remove NA's we omit row 1
muni_list <<- unique(data$X__4[-1])
muniplicity <<- muni_list[1]
},
get_muniplicites = function() {
return(muni_list)
},
set_muniplicity = function(val) {
muniplicity <<- val
},
get_muniplicity = function() {
return(muniplicity)
},
get_mean_p_vals = function() {
temp <- unlist(lapply(seq(9,31,by=2), function(x) {
val <-
as.numeric(
data[[paste("X__", as.character(x), sep="")]]
)
mean(val[data$X__4 == "Blekinge län"])
}))
names(temp) <- unlist(lapply(seq(9,31,by=2), function(x) {
namestr <- strsplit(data[[paste("X__", as.character(x), sep="")]][2], " ")
namestr[[1]][1]
}))
mean_p_vals <<- temp
return(mean_p_vals)
}
)
)
X <- elect_viz$new(data = sheet)
X$get_p_vals()
X$get_mean_p_vals()
names(temp) <- unlist(lapply(seq(9,31,by=2), function(x) {
namestr <- strsplit(sheet[[paste("X__", as.character(x), sep="")]][2], " ")
namestr[[1]][1]
}))
temp
unlist(temp)
elect_viz <- setRefClass(
"elect_viz",
fields = list(
muniplicity = "character",
muni_list = "character",
data = "data.frame",
mean_p_vals = "vector"
),
methods = list(
initialize = function(data) {
# Gets the list of possible muniplicities, removes unused indices
data <<- data[-1,] # To remove NA's we omit row 1
muni_list <<- unique(data$X__4[-1])
muniplicity <<- muni_list[1]
},
get_muniplicites = function() {
return(muni_list)
},
set_muniplicity = function(val) {
muniplicity <<- val
},
get_muniplicity = function() {
return(muniplicity)
},
get_mean_p_vals = function() {
temp <- lapply(seq(9,31,by=2), function(x) {
val <-
as.numeric(
data[[paste("X__", as.character(x), sep="")]]
)
mean(val[data$X__4 == "Blekinge län"])
})
names(temp) <- unlist(lapply(seq(9,31,by=2), function(x) {
namestr <- strsplit(data[[paste("X__", as.character(x), sep="")]][2], " ")
namestr[[1]][1]
}))
mean_p_vals <<- temp
return(mean_p_vals)
}
)
)
X <- elect_viz$new(data = sheet)
X$get_mean_p_vals()
unlist(lapply(seq(9,31,by=2), function(x) {
namestr <- strsplit(sheet[[paste("X__", as.character(x), sep="")]][2], " ")
namestr[[1]][1]
}))
elect_viz <- setRefClass(
"elect_viz",
fields = list(
muniplicity = "character",
muni_list = "character",
data = "data.frame",
mean_p_vals = "vector"
),
methods = list(
initialize = function(data) {
# Gets the list of possible muniplicities, removes unused indices
data <<- data[-1,] # To remove NA's we omit row 1
muni_list <<- unique(data$X__4[-1])
muniplicity <<- muni_list[1]
},
get_muniplicites = function() {
return(muni_list)
},
set_muniplicity = function(val) {
muniplicity <<- val
},
get_muniplicity = function() {
return(muniplicity)
},
get_mean_p_vals = function() {
mean_p_vals <<- lapply(seq(9,31,by=2), function(x) {
val <-
as.numeric(
data[[paste("X__", as.character(x), sep="")]]
)
mean(val[data$X__4 == "Blekinge län"])
})
names(mean_p_vals) <<- unlist(lapply(seq(9,31,by=2), function(x) {
namestr <- strsplit(sheet[[paste("X__", as.character(x), sep="")]][2], " ")
namestr[[1]][1]
}))
return(mean_p_vals)
}
)
)
X <- elect_viz$new(data = sheet)
X$get_mean_p_vals()
elect_viz <- setRefClass(
"elect_viz",
fields = list(
muniplicity = "character",
muni_list = "character",
data = "data.frame",
mean_p_vals = "vector"
),
methods = list(
initialize = function(data) {
# Gets the list of possible muniplicities, removes unused indices
data <<- data[-1,] # To remove NA's we omit row 1
muni_list <<- unique(data$X__4[-1])
muniplicity <<- muni_list[1]
},
get_muniplicites = function() {
return(muni_list)
},
set_muniplicity = function(val) {
muniplicity <<- val
},
get_muniplicity = function() {
return(muniplicity)
},
get_mean_p_vals = function() {
mean_p_vals <<- lapply(seq(9,31,by=2), function(x) {
val <-
as.numeric(
data[[paste("X__", as.character(x), sep="")]]
)
mean(val[data$X__4 == "Blekinge län"])
})
names(mean_p_vals) <<- unlist(lapply(seq(9,31,by=2), function(x) {
namestr <- strsplit(sheet[[paste("X__", as.character(x), sep="")]][2], " ")
namestr[[1]][1]
}))
mean_p_vals <<- unlist(mean_p_vals)
return(mean_p_vals)
}
)
)
X <- elect_viz$new(data = sheet)
X$get_mean_p_vals()
?histogra
?histogram
??histogram
?hist
hist(X$get_mean_p_vals())
?bar
?barplot
barplot(0:10, main=X$get_mean_p_vals())
barplot(X$get_mean_vals())
barplot(X$get_mean_p_vals())
elect_viz <- setRefClass(
"elect_viz",
fields = list(
muniplicity = "character",
muni_list = "character",
data = "data.frame",
mean_p_vals = "vector"
),
methods = list(
initialize = function(data) {
# Gets the list of possible muniplicities, removes unused indices
data <<- data[-1,] # To remove NA's we omit row 1
muni_list <<- unique(data$X__4[-1])
muniplicity <<- muni_list[1]
},
get_muniplicites = function() {
return(muni_list)
},
set_muniplicity = function(val) {
muniplicity <<- val
},
get_muniplicity = function() {
return(muniplicity)
},
get_mean_p_vals = function() {
mean_p_vals <<- lapply(seq(9,27,by=2), function(x) {
val <-
as.numeric(
data[[paste("X__", as.character(x), sep="")]]
)
mean(val[data$X__4 == "Blekinge län"])
})
names(mean_p_vals) <<- unlist(lapply(seq(9,27,by=2), function(x) {
namestr <- strsplit(sheet[[paste("X__", as.character(x), sep="")]][2], " ")
namestr[[1]][1]
}))
mean_p_vals <<- unlist(mean_p_vals)
return(mean_p_vals)
}
)
)
X <- elect_viz$new(data = sheet)
bar(X$get_mean_p_vals())
barplot(X$get_mean_p_vals())
require(readxl)
sheet <- read_excel("~/lab5/2014_riksdagsval_per_valdistrikt.xls")
elect_viz <- setRefClass(
"elect_viz",
fields = list(
muniplicity = "character",
muni_list = "character",
data = "data.frame",
mean_p_vals = "vector"
),
methods = list(
initialize = function(data) {
# Gets the list of possible muniplicities, removes unused indices
data <<- data[-1,] # To remove NA's we omit row 1
muni_list <<- unique(data$X__4[-1])
muniplicity <<- muni_list[1]
},
get_muniplicites = function() {
return(muni_list)
},
set_muniplicity = function(val) {
muniplicity <<- val
},
get_muniplicity = function() {
return(muniplicity)
},
get_mean_p_vals = function() {
mean_p_vals <<- lapply(seq(9,27,by=2), function(x) {
val <-
as.numeric(
data[[paste("X__", as.character(x), sep="")]]
)
mean(val[data$X__4 == "Blekinge län"])
})
names(mean_p_vals) <<- unlist(lapply(seq(9,27,by=2), function(x) {
namestr <- strsplit(sheet[[paste("X__", as.character(x), sep="")]][2], " ")
namestr[[1]][1]
}))
mean_p_vals <<- unlist(mean_p_vals)
return(mean_p_vals)
}
)
)
X <- elect_viz$new(data = sheet)
barplot(X$get_mean_p_vals())
barplot(X$get_mean_p_vals(), main=X$muniplicity())
X$muniplicity()
barplot(X$get_mean_p_vals(), main=X$get_muniplicity())
elect_viz <- setRefClass(
"elect_viz",
fields = list(
muniplicity = "character",
muni_list = "character",
data = "data.frame",
mean_p_vals = "vector"
),
methods = list(
initialize = function(data) {
# Gets the list of possible muniplicities, removes unused indices
data <<- data[-1,] # To remove NA's we omit row 1
muni_list <<- unique(data$X__4[-1])
muniplicity <<- muni_list[2]
},
get_muniplicites = function() {
return(muni_list)
},
set_muniplicity = function(val) {
muniplicity <<- val
},
get_muniplicity = function() {
"Returns the current muniplicity"
return(muniplicity)
},
get_mean_p_vals = function() {
"Returns the mean p-values for the currently selected muniplicity"
mean_p_vals <<- lapply(seq(9,27,by=2), function(x) {
val <-
as.numeric(
data[[paste("X__", as.character(x), sep="")]]
)
mean(val[data$X__4 == "Blekinge län"])
})
names(mean_p_vals) <<- unlist(lapply(seq(9,27,by=2), function(x) {
namestr <- strsplit(sheet[[paste("X__", as.character(x), sep="")]][2], " ")
namestr[[1]][1]
}))
mean_p_vals <<- unlist(mean_p_vals)
return(mean_p_vals)
}
)
)
X <- elect_viz$new(data = sheet)
barplot(X$get_mean_p_vals(), main=X$get_muniplicity())
source('~/lab4/R/server.r')
source('~/.active-rstudio-document')
library(shiny)
print(runExample("01_hello"))
library(shiny)
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
runApp('lab5/lab5.R')
runApp('lab5/lab5.R')
